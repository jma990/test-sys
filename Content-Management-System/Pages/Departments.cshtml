@page
@model Content_Management_System.Pages.DepartmentsModel
@{
}

@await Html.PartialAsync(@Url.Content(PathDirectory._ViewUsers), Model)
@await Html.PartialAsync(@Url.Content(PathDirectory._AddDepartment), Model)
<h2>Departments</h2>

<!-- Add Department Button -->
<button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#addDepartmentModal">
    <i class="bi bi-plus-lg"></i> Add Department
</button>


@Html.AntiForgeryToken()
<div class="mb-3">
    <a asp-page="@Url.Content(PathDirectory.DepartmentsPage)" asp-route-filter="all"
       class="btn btn-outline-primary @(Model.Filter == "all" ? "active" : "")">All</a>
    <a asp-page="@Url.Content(PathDirectory.DepartmentsPage)" asp-route-filter="active"
       class="btn btn-outline-success @(Model.Filter == "active" ? "active" : "")">Active</a>
    <a asp-page="@Url.Content(PathDirectory.DepartmentsPage)" asp-route-filter="inactive"
       class="btn btn-outline-secondary @(Model.Filter == "inactive" ? "active" : "")">Inactive</a>
</div>
<table class="table table-sm">
    <thead>
        <tr>
            <th>Department Name</th>
            <th>Number of Users</th>
            <th>Status</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var dept in Model.Departments)
    {
        <tr data-id="@dept.ID">
            <td class="view-mode">@dept.DepartmentName</td>
            <td>@dept.UserCount</td>
            <td class="view-mode status-cell">
                @if (dept.IsActive)
                {
                    <span class="badge bg-success">Active</span>
                }
                else
                {
                    <span class="badge bg-secondary">Inactive</span>
                }
            </td>
            <td>
                <button type="button" class="btn btn-sm btn-link edit-btn"><i class="bi bi-pencil"></i></button>
                <button type="button" class="btn btn-sm btn-link save-btn d-none"><i class="bi bi-check-lg"></i></button>
                @if (dept.UserCount == 0)   
                {
                    <button type="button" class="btn btn-sm btn-link archive-btn" data-id="@dept.ID" data-active="@dept.IsActive">
                        @if (dept.IsActive)
                        {
                            <i class="bi bi-trash" title="Archive"></i>
                        }
                        else
                        {
                            <i class="bi bi-arrow-counterclockwise" title="Unarchive"></i>
                        }
                    </button>
                }

                <button type="button"
                        class="btn btn-sm btn-link view-users-btn"
                        data-bs-toggle="modal"
                        data-bs-target="#viewUsersModal"
                        data-id="@dept.ID"
                        data-name="@dept.DepartmentName">
                    <i class="bi bi-people" title="View Users"></i>
                </button>


                
                <!-- Hidden edit form -->
                <form class="edit-form d-none" method="post" asp-page-handler="Edit">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="EditID" value="@dept.ID" />
                    <input type="text" name="EditDepartmentName" class="form-control form-control-sm" />
                    <input type="hidden" name="Filter" value="@Model.Filter" /> 
                </form>

                <!-- Hidden archive form -->
                <form class="archive-form d-none" method="post" asp-page-handler="Archive">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="ArchiveID" value="@dept.ID" />
                    <input type="hidden" name="Filter" value="@Model.Filter" /> 
                </form>
            </td>
        </tr>
    }
    </tbody>
</table>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            enableTableSorting("table", [3]);
            // -----------------------------
            const rows = document.querySelectorAll("table tbody tr");
            rows.forEach((row) => {
                const editBtn = row.querySelector(".edit-btn");
                const saveBtn = row.querySelector(".save-btn");
                const form = row.querySelector(".edit-form");
                const realInput = form.querySelector("input[name='EditDepartmentName']");
                const viewCell = row.querySelector(".view-mode");

                editBtn.addEventListener("click", () => {
                    // fill input with current text
                    realInput.value = viewCell.textContent.trim();

                    // replace view with clone input
                    const clone = realInput.cloneNode(true);
                    clone.removeAttribute("name");
                    clone.value = realInput.value;
                    clone.classList.add("form-control", "form-control-sm");

                    clone.addEventListener("input", () => {
                        realInput.value = clone.value;
                    });

                    viewCell.innerHTML = "";
                    viewCell.appendChild(clone);

                    editBtn.classList.add("d-none");
                    saveBtn.classList.remove("d-none");
                    form.classList.remove("d-none");
                    form.style.display = "none";
                });

                saveBtn.addEventListener("click", (e) => {
                    e.preventDefault();
                    const cloneInput = viewCell.querySelector("input");
                    realInput.value = cloneInput.value.trim();
                    form.submit();
                });

                // Archive/Unarchive button confirmation
                const archiveBtn = row.querySelector(".archive-btn");
                if (archiveBtn) {   // check if button exists first
                    archiveBtn.addEventListener("click", () => {
                        const isActive = archiveBtn.getAttribute("data-active") === "True";  
                        const actionText = isActive ? "archived" : "unarchived";
                        const actionTitle = isActive ? "Archive Department?" : "Unarchive Department?";

                        Swal.fire({
                            title: actionTitle,
                            text: `This department will be ${actionText}.`,
                            icon: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#3085d6",
                            cancelButtonColor: "#d33",
                            confirmButtonText: "Confirm"
                        }).then((result) => {
                            if (result.isConfirmed) {
                                const archiveForm = row.querySelector(".archive-form");
                                archiveForm.submit();
                            }
                        });
                    });
                }
            });

            // SweetAlert popup if invalid user input
            @if (!string.IsNullOrEmpty(Model.AlertMessage))
            {
                <text>
                Swal.fire({
                    icon: '@Model.AlertType',
                    title: '@Model.AlertMessage',
                    confirmButtonText: 'OK'
                });
                </text>

                // Clear TempData so it doesn't show again
                @TempData.Remove("AlertMessage");
                @TempData.Remove("AlertType");
            }
        });
    </script>
}
